generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId           String            @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  provider         String            @db.VarChar
  providerId       String            @map("provider_id") @db.VarChar
  email            String?           @db.VarChar
  username         String            @db.VarChar
  nickname         String?           @db.VarChar
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime?         @map("deleted_at") @db.Timestamp(6)
  attendance       Attendance[]      @relation("UserAttendance")
  communityMembers CommunityMember[]
  notifications    Notification[]
  reactions        Reaction[]
  studyGoals       StudyGoal[]       @relation("GoalOwner")

  @@index([provider, providerId], map: "idx_user_provider")
  @@index([email], map: "idx_user_email")
  @@map("users")
}

model Community {
  clubId           String            @id @default(dbgenerated("gen_random_uuid()")) @map("club_id") @db.Uuid
  name             String            @db.VarChar
  description      String?
  isPublic         Boolean           @default(true) @map("is_public")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime?         @map("deleted_at") @db.Timestamp(6)
  tagname          String[]          @default([]) @db.VarChar
  region           String?           @db.VarChar
  subRegion        String?           @map("sub_region") @db.VarChar
  communityMembers CommunityMember[]
  notifications    Notification[]
  rounds           Round[]
  studyGoals       StudyGoal[]

  @@index([isPublic], map: "idx_community_public")
  @@index([name], map: "idx_community_name")
  @@index([region], map: "idx_community_region")
  @@index([subRegion], map: "idx_community_sub_region")
  @@map("communities")
}

model StudyGoal {
  goalId      String     @id @default(dbgenerated("gen_random_uuid()")) @map("goal_id") @db.Uuid
  ownerId     String     @map("owner_id") @db.Uuid
  clubId      String?    @map("club_id") @db.Uuid
  title       String     @db.VarChar
  description String?
  isTeam      Boolean    @default(false) @map("is_team")
  startDate   DateTime   @map("start_date") @db.Date
  endDate     DateTime   @map("end_date") @db.Date
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime   @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime?  @map("deleted_at") @db.Timestamp(6)
  roundId     String?    @map("round_id") @db.Uuid
  isComplete  Boolean    @default(false) @map("is_complete")
  club        Community? @relation(fields: [clubId], references: [clubId], onUpdate: NoAction, map: "fk_goal_club")
  owner       User       @relation("GoalOwner", fields: [ownerId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_goal_owner")
  round       Round?     @relation(fields: [roundId], references: [roundId], onUpdate: NoAction, map: "fk_goal_round")

  @@index([ownerId], map: "idx_goal_owner")
  @@index([startDate, endDate], map: "idx_goal_dates")
  @@index([isTeam], map: "idx_goal_team")
  @@index([roundId], map: "idx_goal_round")
  @@index([isComplete], map: "idx_goal_complete")
  @@index([clubId], map: "idx_goal_club")
  @@map("study_goals")
}

model Reaction {
  reactionId        String          @id @default(dbgenerated("gen_random_uuid()")) @map("reaction_id") @db.Uuid
  userId            String          @map("user_id") @db.Uuid
  member_id         String          @db.Uuid
  reaction          String
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  deletedAt         DateTime?       @map("deleted_at") @db.Timestamp(6)
  community_members CommunityMember @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reaction_member")
  user              User            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_reaction_user")

  @@index([userId], map: "idx_reaction_user")
  @@index([member_id], map: "idx_reaction_member")
  @@map("reactions")
}

model CommunityMember {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clubId    String     @map("club_id") @db.Uuid
  userId    String     @map("user_id") @db.Uuid
  role      String     @default("member") @db.VarChar
  joinedAt  DateTime   @default(now()) @map("joined_at") @db.Timestamp(6)
  deletedAt DateTime?  @map("deleted_at") @db.Timestamp(6)
  community Community  @relation(fields: [clubId], references: [clubId], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_club")
  user      User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_user")
  reactions Reaction[]

  @@index([userId], map: "idx_member_user")
  @@index([clubId], map: "idx_member_club")
  @@map("community_members")
}

model Round {
  roundId     String       @id @default(dbgenerated("gen_random_uuid()")) @map("round_id") @db.Uuid
  clubId      String       @map("club_id") @db.Uuid
  roundNumber Int          @default(1) @map("round_number")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime?    @map("deleted_at") @db.Timestamp(6)
  startDate   DateTime?    @map("start_date") @db.Timestamp(6)
  endDate     DateTime?    @map("end_date") @db.Timestamp(6)
  location    String?      @db.VarChar
  attendance  Attendance[] @relation("RoundAttendance")
  community   Community    @relation(fields: [clubId], references: [clubId], onDelete: Cascade, onUpdate: NoAction, map: "fk_round_club")
  studyGoals  StudyGoal[]

  @@index([clubId], map: "idx_round_club")
  @@index([createdAt], map: "idx_round_created")
  @@index([startDate, endDate], map: "idx_round_dates")
  @@map("rounds")
}

model Notification {
  notificationId String    @id @default(dbgenerated("gen_random_uuid()")) @map("notification_id") @db.Uuid
  clubId         String    @map("club_id") @db.Uuid
  authorId       String?   @map("author_id") @db.Uuid
  title          String    @db.VarChar
  content        String?
  isPinned       Boolean   @default(false) @map("is_pinned")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(6)
  author         User?     @relation(fields: [authorId], references: [userId], onUpdate: NoAction, map: "fk_notification_author")
  community      Community @relation(fields: [clubId], references: [clubId], onDelete: Cascade, onUpdate: NoAction, map: "fk_notification_club")

  @@index([clubId], map: "idx_notification_club")
  @@index([authorId], map: "idx_notification_author")
  @@map("notifications")
}

model Attendance {
  attendanceId   String    @id @default(dbgenerated("gen_random_uuid()")) @map("attendance_id") @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  roundId        String    @map("round_id") @db.Uuid
  attendanceDate DateTime  @map("attendance_date") @db.Timestamp(6)
  attendanceType String    @map("attendance_type") @db.VarChar
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(6)
  round          Round     @relation("RoundAttendance", fields: [roundId], references: [roundId], onDelete: Cascade, onUpdate: NoAction, map: "fk_attendance_round")
  user           User      @relation("UserAttendance", fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction, map: "fk_attendance_user")

  @@unique([roundId, userId], map: "uk_attendance_round_user")
  @@index([roundId], map: "idx_attendance_round")
  @@index([userId], map: "idx_attendance_user")
  @@index([attendanceDate], map: "idx_attendance_date")
  @@index([userId, attendanceDate], map: "idx_attendance_user_date")
  @@map("attendance")
}
